version: "3"
services:
  #
  # Core services. These services allow a Grafana Agent to send data somewhere
  # and visualize it in Grafana.
  #
  # Backends: grafana, loki, mimir, tempo
  # Example services: avalanche
  #

  grafana:
    image: grafana/grafana:10.0.3
    entrypoint:
      - /usr/share/grafana/bin/grafana-server
      - --homepath=/usr/share/grafana
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ./grafana/config:/etc/grafana-config
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS: grafana-worldmap-panel

  loki:
    image: grafana/loki:2.8.3
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  mimir:
    image: grafana/mimir:2.9.0
    volumes:
      - ./mimir/config:/etc/mimir-config
    entrypoint:
      - /bin/mimir
      - -config.file=/etc/mimir-config/mimir.yaml
    ports:
      - "9009:9009"

  tempo:
    image: grafana/tempo:2.1.0
    command:
      - "-storage.trace.backend=local"                  # tell tempo where to permanently put traces
      - "-storage.trace.local.path=/tmp/tempo/traces"
      - "-storage.trace.wal.path=/tmp/tempo/wal"        # tell tempo where to store the wal
      - "-auth.enabled=false"                           # disables the requirement for the X-Scope-OrgID header
      - "-server.http-listen-port=3200"
    ports:
      - "3200:3200"
      - "4317:4317"

  avalanche:
    image: quay.io/freshtracks.io/avalanche:latest
    command:
      - --metric-count=3000
      - --series-interval=3600
      - --metric-interval=7200
    ports:
      - "9001:9001"

  hotrod:
    profiles: [agent]
    image: yurishkuro/microsim:latest
    ports:
      - "8080:8080"
    command:
      - "-j=http://agent:14268/api/traces"
      - "-d=1h"
    depends_on:
      - agent

  #
  # Optional Grafana Agent which can collect telemetry and send it to
  # Loki/Mimir/Tempo.
  #
  # Enable with the "agent" profile.
  #

  agent:
    profiles: [agent]
    image: grafana/agent:latest
    volumes:
      - ./agent/config:/etc/agent-config
      - logs:/var/log/nginx
    entrypoint:
      - /bin/grafana-agent
      - -server.http.address=0.0.0.0:12345
      - -config.file=/etc/agent-config/agent.yaml
      - -metrics.wal-directory=/tmp/agent/wal
      - -enable-features=integrations-next
      - -config.expand-env
      - -config.enable-read-api
    environment:
      HOSTNAME: agent
      REMOTE_WRITE_HOST: mimir:9009
      LOKI_HOST: loki:3100
      TEMPO_HOST: tempo:4317
      AVALANCHE_HOST: avalanche:9001
      MYSQL_HOST: mysql:3306
      POSTGRES_HOST: postgres:5432
      REDIS_HOST: redis:6379
      DNSMASQ_HOST: dnsmasq:53
      MEMCACHED_HOST: memcached:11211
      CONSUL_HOST: consul:8500
      ELASTICSEARCH_HOST: elasticsearch:9200
      NGINX_HOST: nginx:80
    ports:
      - "12345:12345"
    depends_on:
      - mimir
      - loki
      - tempo
     

  #
  # Integrations. These services act as sample SUOs that you can test
  # integrations against.
  #
  # They are disabled by default. Enable the "integrations" profile to enable
  # all of them, or pass an integration by name (i.e., mysql) to enable a
  # specific one.
  #

  mysql:
    profiles: [integrations,mysql]
    image: mysql/mysql-server:5.7
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_ROOT_HOST=%
    ports:
      - 127.0.0.1:3306:3306

  ##postgres:
  #  profiles: [integrations,postgres]
  #  image: postgres:13.0
  #  environment:
  #    - POSTGRES_USER=postgres
  #    - POSTGRES_PASSWORD=password
  #  ports:
  #    - 5432:5432

  redis:
    profiles: [integrations,redis]
    image: redis:6
    ports:
      - "6379:6379"

  ##dnsmasq:
  #  profiles: [integrations,dnsmasq]
  #  image: andyshinn/dnsmasq:2.81
  #  cap_add: [NET_ADMIN]
  #  volumes:
  #    - /tmp/dnsmasq-leases:/var/lib/misc
  #  ports:
  #    - "30053:53/udp"

  #memcached:
  #  profiles: [integrations,memcached]
  #  image: memcached
  #  ports:
  #    - "11211:11211"

  #consul:
  #  profiles: [integrations,consul]
  #  image: hashicorp/consul
  #  ports:
  #    - "8500:8500"

  elasticsearch:
    profiles: [integrations,elasticsearch]
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - node.name=elasticsearch
      - cluster.name=es-grafana-agent-cluster
      - discovery.type=single-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  nginx:
    profiles: [integrations,nginx]
    image: nginx:alpine
    working_dir: /application
    volumes:
      - .:/application
      - ./nginx/dev/dev.conf:/etc/ginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static-website-example:/usr/share/nginx/html
      - logs:/var/log/nginx
    ports:
      - "80:80"

volumes:
  logs:
  elasticsearch_data:
    driver: local
